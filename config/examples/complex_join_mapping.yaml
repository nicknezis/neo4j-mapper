# Complex mapping example with JOINs
# This example shows mapping data from multiple tables with relationships

databases:
  - path: "data/ecommerce.db"
    alias: "ecommerce"
  - path: "data/analytics.db"
    alias: "analytics"

mappings:
  - name: "ecommerce_graph"
    
    # JOIN operations to combine data from multiple tables
    joins:
      - type: "INNER"
        left_table: "ecommerce.users"
        right_table: "ecommerce.orders"
        condition: "users.id = orders.user_id"
      - type: "LEFT"
        left_table: "ecommerce.orders"
        right_table: "ecommerce.order_items"
        condition: "orders.id = order_items.order_id"
      - type: "INNER"
        left_table: "ecommerce.order_items"
        right_table: "ecommerce.products"
        condition: "order_items.product_id = products.id"
    
    # Node definitions
    nodes:
      - label: "User"
        source: "users"
        id_field: "id"
        # Only include active users who registered in the last 2 years
        where: "is_active = true AND registration_date >= '2022-01-01'"
        properties:
          - field: "name"
            type: "string"
          - field: "email"
            type: "string"
          - field: "registration_date"
            type: "datetime"
          - field: "country"
            type: "string"
          - field: "is_active"
            type: "boolean"
        # Computed properties example
        computed_properties:
          - name: "display_name"
            type: "string"
            expression: "UPPER(name)"
          - name: "user_code"
            type: "string"
            expression: "CONCAT('USER_', id)"
      
      - label: "Order"
        source: "orders"
        id_field: "id"
        # Only include completed orders with value > $25
        where: "status IN ('completed', 'shipped') AND total_amount > 25.0"
        properties:
          - field: "order_number"
            type: "string"
          - field: "order_date"
            type: "datetime"
          - field: "total_amount"
            type: "float"
          - field: "status"
            type: "string"
      
      - label: "Product"
        source: "products"
        id_field: "id"
        properties:
          - field: "name"
            type: "string"
          - field: "category"
            type: "string"
          - field: "price"
            type: "float"
          - field: "description"
            type: "string"
    
    # Relationship definitions
    relationships:
      - type: "PLACED_ORDER"
        source: "orders"
        from_id_column: "user_id"
        to_id_column: "id"
        from_node: "User"
        to_node: "Order"
        # Only include relationships for orders placed this year
        where: "order_date >= '2024-01-01'"
        properties:
          - field: "order_date"
            type: "datetime"
      
      - type: "CONTAINS"
        source: "order_items"
        from_id_column: "order_id"
        to_id_column: "product_id"
        from_node: "Order"
        to_node: "Product"
        # Only include high-quantity items (> 1 unit)
        where: "quantity > 1"
        properties:
          - field: "quantity"
            type: "integer"
          - field: "unit_price"
            type: "float"

  # Second mapping for analytics data
  - name: "user_analytics"
    
    nodes:
      - label: "UserSession"
        source: "analytics.user_sessions"
        id_field: "session_id"
        properties:
          - field: "user_id"
            type: "string"
          - field: "start_time"
            type: "datetime"
          - field: "end_time"
            type: "datetime"
          - field: "page_views"
            type: "integer"
          - field: "device_type"
            type: "string"
    
    relationships:
      - type: "HAD_SESSION"
        source: "sessions"
        from_id_column: "user_id"
        to_id_column: "session_id"
        from_node: "User"
        to_node: "UserSession"
        # Note: This would require the User nodes to be created first
        # or use a post-processing step to link across mappings

output:
  format: "csv"  # CSV format for this example
  directory: "output"